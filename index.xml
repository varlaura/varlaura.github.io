<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>var Blog: a variable blog</title>
    <link>https://varlaura.github.io/</link>
    <description>Recent content on var Blog: a variable blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Mar 2021 17:37:31 +0100</lastBuildDate><atom:link href="https://varlaura.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Books and Resources</title>
      <link>https://varlaura.github.io/posts/books-and-resources/</link>
      <pubDate>Sun, 14 Mar 2021 17:37:31 +0100</pubDate>
      
      <guid>https://varlaura.github.io/posts/books-and-resources/</guid>
      <description>Since I started working in threatintel and specifically analysing state sponsored attack, I felt the need to understand the geopolitical component connected to the malicious campaigns and attacks. In particular, I wanted to understand the historical and social component behind the cyber attack.
So here is a list of my recently read books on the topic (language specified next to the resource):
 &amp;ldquo;Active measures, the secret history of disinformation and political warfare&amp;rdquo;, Thomas Rid.</description>
    </item>
    
    <item>
      <title>Sneaky loading DLLs in a Windows executable</title>
      <link>https://varlaura.github.io/posts/sneaky-loading-dlls/</link>
      <pubDate>Fri, 12 Mar 2021 11:15:15 +0100</pubDate>
      
      <guid>https://varlaura.github.io/posts/sneaky-loading-dlls/</guid>
      <description>This post is a walk through on how to load DLLs “manually” without the use of the WinAPI LoadLibrary and store APIs addresses in memory in order to make it less obvious which API functions are imported (and therefore used) by the malware.
With this technique, the malware analyst cannot see which functions are imported from the Import section. It will be necessary to step through the code to find out which API functions are actually used.</description>
    </item>
    
    <item>
      <title>A collection of anti-analysis techniques for Windows</title>
      <link>https://varlaura.github.io/posts/anti-analysis-techniques-for-win/</link>
      <pubDate>Thu, 11 Mar 2021 21:02:46 +0100</pubDate>
      
      <guid>https://varlaura.github.io/posts/anti-analysis-techniques-for-win/</guid>
      <description>This post is a brief collection of anti-debugging and anti-analysis techniques that I found while reversing some samples. Anti-analysis techniques&#39; purpose is to slow down the analysis as much as possible. By using these techniques a malware could detect if the malicious code is running in a monitored environment and decide to not execute at all or to behave differently, causing the analysis to be mislead.
An example of different behavior could be contacting a different C2 to alert the attacker that some analysis is conducted on the binary (or to make superficial analysis lead to the wrong IOCs).</description>
    </item>
    
  </channel>
</rss>
